apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: sidecar
  namespace: otel-collector
spec:
  mode: sidecar
  config:
    # This is a new configuration file - do not merge this with your metrics configuration!
    receivers:
      # k8s_events:
      #   namespaces: []
      filelog:
        include:
          - /var/log/pods/*/*/*.log
        start_at: beginning
        include_file_path: true
        include_file_name: false
        operators:
          # Find out which format is used by kubernetes
          - type: router
            id: get-format
            routes:
              - output: parser-docker
                expr: 'body matches "^\\{"'
              - output: parser-crio
                expr: 'body matches "^[^ Z]+ "'
              - output: parser-containerd
                expr: 'body matches "^[^ Z]+Z"'
          # Parse CRI-O format
          - type: regex_parser
            id: parser-crio
            regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout_type: gotime
              layout: '2006-01-02T15:04:05.999999999Z07:00'
          # Parse CRI-Containerd format
          - type: regex_parser
            id: parser-containerd
            regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Parse Docker format
          - type: json_parser
            id: parser-docker
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Extract metadata from file path
          - type: regex_parser
            id: extract_metadata_from_filepath
            # Pod UID is not always 36 characters long
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{16,36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: attributes["log.file.path"]
            cache:
              size: 128 # default maximum amount of Pods per Node is 110
          # Rename attributes
          - type: move
            from: attributes["log.file.path"]
            to: resource["filename"]
          - type: move
            from: attributes.container_name
            to: resource["container"]
          - type: move
            from: attributes.namespace
            to: resource["namespace"]
          - type: move
            from: attributes.pod_name
            to: resource["pod"]
          - type: add
            field: resource["cluster"]
            value: 'your-cluster-name' # Set your cluster name here
          - type: move
            from: attributes.log
            to: body
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:14317 
          http:
            endpoint: ${env:MY_POD_IP}:14318 
      # jaeger:
      #   protocols:
      #     thrift_compact: {}
    processors:
      batch: {}
      resource/filelog:
        attributes:
          - action: insert
            key: loki.format
            value: raw
          - action: insert
            key: loki.resource.labels
            value: pod, namespace, container, cluster, filename
      resource/k8s_events:
        attributes:
          - action: insert
            key: cluster
            value: 'default-values-test'
          - action: insert
            key: job
            value: 'integrations/kubernetes/eventhandler'
          - action: insert
            key: loki.resource.labels
            value: job, cluster
    exporters:
      # https://github.com/open-telemetry/opentelemetry-collector/blob/main/exporter/debugexporter/README.md
      debug:
        verbosity: detailed
      # https://grafana.com/docs/loki/latest/send-data/otel/
      otlphttp/loki:
        endpoint: http://loki.loki:3100/otlp
      
    service:
      telemetry:
        logs:
          level: "debug"
      pipelines:
        # logs:
        #   receivers: [filelog]
        #   processors: [batch,resource/filelog]
        #   exporters: [debug, otlphttp/loki]
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [debug]
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [debug]
